name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-html
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py --unit --coverage
    
    - name: Run integration tests
      run: |
        python tests/run_tests.py --integration
    
    - name: Run all tests with coverage
      run: |
        python tests/run_tests.py --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./htmlcov/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .pytest_cache/
          test-results/

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        flake8 clients/ adapters/ indicators/ registries/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 clients/ adapters/ indicators/ registries/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run black (check only)
      run: |
        black --check --line-length 127 clients/ adapters/ indicators/ registries/ tests/
    
    - name: Run isort (check only)
      run: |
        isort --check-only --profile black --line-length 127 clients/ adapters/ indicators/ registries/ tests/
    
    - name: Run mypy (non-blocking)
      run: |
        echo "Running mypy type checking (non-blocking)..."
        mypy --explicit-package-bases --namespace-packages --ignore-missing-imports --no-strict-optional clients/ adapters/ indicators/ registries/ || echo "mypy found type issues (non-blocking)"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r clients/ adapters/ indicators/ registries/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/ 